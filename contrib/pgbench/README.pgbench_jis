$PostgreSQL: pgsql/contrib/pgbench/README.pgbench_jis,v 1.19 2007/04/08 01:15:07 ishii Exp $

pgbench README

■pgbench とは？

pgbench はPostgreSQLのベンチマークテストを行なうプログラムです．

pgbench は SELECT/UPDATE/INSERT を含むトランザクションを実行し，全体の
実行時間と実際に完了したトランザクションの数から 1 秒間に実行できたト
ランザクション数 (tps) を表示します．処理の対象となるテーブルはデフォ
ルトでは 10万タプルのデータを含みます．

実際の表示は以下のような感じです．

number of clients: 4
number of transactions per client: 100
number of processed transactions: 400/400
tps = 19.875015(including connections establishing)
tps = 20.098827(excluding connections establishing)

pgbench は JDBCBench という，もともとは MySQL 用に書かれた JDBC 用のベ
ンチマークプログラムを参考に作成されました．

■pgbench の特徴

o C 言語と libpq だけで書かれているので移植性が高く，簡単にインストー
ルできます．

o pgbench は libpq の非同期処理機能を使ってマルチユーザ環境をシミュレー
トします．容易に同時接続環境をテストできます．

■pgbench のインストール

PostgreSQLをコンパイル，インストールした後

$ make
$ make install

とします．

■pgbench の使い方

$ pgbench [データベース名]

です．データベース名を省略すると，ユーザ名と同じデータベースを指定した
ものとみなします．データベースは後述の -i オプションを使ってあらかじめ
初期化しておくことができます．-fオプションを使って独自のトランザクショ
ンを定義する場合は，自分でデータベースの初期化をしておく必要があります．

pgbench にはいろいろなオプションがあります．

-h ホスト名	PostgreSQLのデータベースデーモン postmaster の動
		いているホスト名を指定します．省略すると自ホストに Unix domain
		socket で接続します．

-p ポート番号	postmaster の使用するポート番号を指定します．省略すると 5432
		が指定されたものとみなします．

-c クライアント数	同時実行クライアント数を指定します．省略時は
			1 となります．pgbench は同時実行クライアント毎に
			ファイルディスクリプタを使用するので，使用可能
			ファイルディスクリプタ数を越えるクライアント数は
			指定できません．使用可能ファイルディスクリプタ数
			は limit や ulimit コマンドで知ることができます．

-t トランザクション数	各クライアントが実行するトランザクション数を
			指定します．省略時は 10 となります．

-s スケーリングファクター

		-i オプションと一緒に使用します．
		スケーリングファクターは1以上の整数．スケーリングファ
		クターを変えることにより，テストの対象となるテーブルの
		大きさが 10万 x [スケーリングファクター]になります．
		デフォルトのスケーリングファクターは 1 です．
		-f オプションで指定したファイルからスケーリングファク
		ターを参照するには scale という変数名を使用します．
		注意: スケーリングファクターは少なくとも -c で指定される同時接
		続ユーザ数と同じかそれよりも大きくしてください．でないと，
		pgbenchの結果はUPDATEの競合に大きく影響されてしまいます．
		組込みのベンチマークパターンでは，brachesの数(=brachesテーブル
		の行数)が自動的にスケーリングファクターに設定されます．
		カスタムクエリ(-fオプション使用)では，スケーリングファクターは
		自動設定されません．

-D varname=value

		変数を定義します．定義した変数は -f オプションで指定したファイ
		ルから参照できます．-D オプションでは変数名と値を = (イコール)
		で区切って指定します．-D オプションは複数指定できます．

-U login	DBユーザのログイン名を指定します．

-P password	パスワードを指定します．なお，このオプションを使うと，
		パスワードをpsコマンドで見られるなど，セキュリティホー
		ルになる可能性があるので，テスト用にのみお使い下さい．

-n		このオプションを指定すると，ベンチマーク開始前に vacuum と
		history のクリアを行ないません．

-v              このオプションを指定すると，デフォルトの事前クリーンアッ
                プ処理に加え，accountsをVACUUM ANALYZEします．

		-v -n の両方を省略した場合のデフォルト事前クリーンアッ
                プ処理は，以下の処理を行います．

		- historyからの全行削除
		- branches, tellers, historyのVACUUM

		これは，vacuum の時間を最小限にしながら，パフォーマンスに
		影響するゴミ掃除を効果的に行います．通常は -v と -n を
		省略することをおすすめします．

-S		TPC-Bのトランザクションではなく，検索のみのトランザクションを
		実行します．検索スピードを測定したいときに使います．

-N
		"branches"と"tellers"テーブルの更新を行いません．これ
		によって"branches"と"tellers"への大量の更新の競合のな
		い状態での測定を行います．したがってTPC-Bのスペックに
		は適合しなくなりますが，より現実的な負荷をテストするこ
		とができます．

-f filename	トランザクションの内容が記述されたファイル名を指定しま
		す．このオプションを指定すると，ファイルに記述された内
		容のトランザクションを実行します．なお，ベンチマークの
		対象となるデータベースはあらかじめ初期化しておく必要が
		あります．入力フォーマットについては後述します．

-C		このオプションを指定すると，最初に確立したコネクション
		を使い回すのではなく，各トランザクションごとにDBへの接
		続を行います．コネクションのオーバーへッドを測定するの
		に有効です．

-l		個々のトランザクションの実行時間を記録します．記録先は
		カレントディレクトリ以下のpgbench_log.xxxというファイ
		ルです．ファイルのフォーマットは，
		
			クライアントID	トランザクション番号  時間 ファイル番号 Unixタイム(秒) オフセット

		となっています．時間はマイクロ秒単位です．

		ファイル番号はテストに使われたファイルの番号です(-fオプション
		を複数指定したときに有用です)．

		「Unixタイム(秒) オフセット」は，トランザクションが完了したと
		きのUNIXエポックタイムとマイクロ秒単位のオフセットです(ISO
		8601タイムスタンプと秒の中の端数)．

		ログの出力例を示します．

		0 199 2241 0 1175850568 995598
		0 200 2465 0 1175850568 998079
		0 201 2513 0 1175850569 608
		0 202 2038 0 1175850569 2663

-F フィルファクター
		accounts, tellers, bracnhesテーブルを作成する際に指定されたフィ
		ルファクターを使用します．フィルファクターのデフォルトは100で
		す．このオプションは -i オプションと同時に使用します．

-d		デバッグオプション．様々な情報が表示されます．

■データベースの初期化

pgbench でベンチマークテストを実施するためには，あらかじめデータベース
を初期化し，テストデータを作る必要があります．-fオプションを使って独自
のトランザクションを定義する場合は，自分でデータベースの初期化をしてお
く必要があります．

$ pgbench -i [データベース名]

これにより以下のテーブルが作られます(スケーリングファクター == 1 の場合)．

＊注意＊
同じ名前のテーブルがあると削除されてしまうのでご注意下さい！！

テーブル名	タプル数
-------------------------
branches	1
tellers		10
accounts	100000
history		0

スケーリングファクターを 10,100,1000 などに変更すると，上記タプル数は
それに応じて10倍，100倍，1000倍になります．テーブルとインデックスのサ
イズはデータベースサイズは概ねそれぞれ，130MB，1.3GB，13GBほどになりま
す．

たとえば，スケーリングファクターを 10 とすると，

テーブル名	タプル数
-------------------------
branches	10
tellers		100
accounts	1000000
history		0

になります．

■「トランザクション」の定義

pgbench では，以下のシーケンスを全部完了して1トランザクションと数えて
います．

(1) begin;

(2) update accounts set abalance = abalance + :delta where aid = :aid;
    ここで，:deltaは1から1000までの値を取る乱数，:aid は 1から100000まで
    の値を取る乱数です．以下，乱数の値はそれぞれこのトランザクションの
    中では同じ値を使います．

(3) select abalance from accounts where aid = :aid;
    ここでは1件だけ検索されます．

(4) update tellers set tbalance = tbalance + :delta where tid = :tid;
    ここで :tid は 1から10の間の値をとる乱数です．

(5) update branches set bbalance = bbalance + :delta where bid = :bid;
    ここで :bid は 1 から[スケリングファクター]の間の値を取る乱数です．

(6) insert into history(tid,bid,aid,delta) values(:tid,:bid,:aid,:delta);

(7) end;

-Nオプションを使用すると，(4)(5)は実行されません．

■入力ファイルのフォーマット

-f オプションを指定してトランザクションに含まれる SQL コマンドの内容を
記述したファイルを読み込むことができます．入力ファイルには 1 行につき 
1 つのコマンドを記述します．空行は無視され，二重ハイフンで始まる行はコ
メントを意味します．

-f オプションは複数指定できます．この場合は各トランザクションにはラン
ダムに選ばれたファイルに記述されたSQLが実行されます．

コマンドには，SQL コマンドに加え，バックスラッシュで始まるメタコマンド
を記述できます．メタコマンドは pgbench 自身によって実行されます．メタ
コマンドの形式はバックスラッシュ，その直後にコマンドの動詞，その次に引
数が続きます．動詞コマンドと引数，またそれぞれの引数は空白文字によって
区切られます．

現在のところ，以下のメタコマンドが定義されています．

\set name operand1 [ operator operand2 ]
	被演算数 operand1 と operand2 を演算子 operator によって演算し
	た結果を変数 name に設定します．現状では整数の四則演算のみに対
	応しています．なお，演算子と 2 つ目の被演算数を省略すると単純
	に 1 つ目の被演算数を変数に設定します．

	変数に演算の結果を設定するには，\set メタコマンドを使用して以
	下のように記述します．

	\set ntellers 10 * :tp

	これは，変数 ntellers にスケーリングファクター (-s オプション
	で指定した) を 10 倍した結果を設定します．

\setrandom name min max

	最小値 min と最大値 max の間の値を取る乱数を，name 変数に設定
	します．

	変数に乱数を設定するには，\setrandom メタコマンドを使用して以下のよう
	に記述します．

	\setrandom aid 1 100000

	これは，変数 aid に 1 から 100000 の間の乱数を設定します．

変数は SQL コマンドおよびメタコマンドから参照できます．それには以下の
ように変数名の前にコロンを付けます．

SELECT abalance FROM accounts WHERE aid = :aid

変数を定義するにはメタコマンド以外に -D オプションを使用することもでき
ます． -D オプションで定義した変数も変数名の前にコロンを付けて参照しま
す．

例えば，TCP-B に類似したベンチマークを計測するには，以下のようにトラン
ザクションの内容をファイルに記述し，-f オプションによってそのファイル
を指定して pgbench を実行します．

\set nbranches :scale
\set ntellers 10 * :scale
\set naccounts 100000 * :scale
\setrandom aid 1 :naccounts
\setrandom bid 1 :nbranches
\setrandom tid 1 :ntellers
\setrandom delta 1 10000
BEGIN
UPDATE accounts SET abalance = abalance + :delta WHERE aid = :aid
SELECT abalance FROM accounts WHERE aid = :aid
UPDATE tellers SET tbalance = tbalance + :delta WHERE tid = :tid
UPDATE branches SET bbalance = bbalance + :delta WHERE bid = :bid
INSERT INTO history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, current_timestamp)
END

スケーリングファクターを branches テーブルのタプル数から自動的に設定し
たい場合，以下のように -s オプションとシェルのコマンド置換などを組み合
わせます．

pgbench -s $(psql -At -c "SELECT count(*) FROM branches") -f tpc_b.sql

なお，-f オプションを指定した場合，ベンチマーク開始前に vacuum と
history のクリアは自動的に行われません．

■作者とライセンス条件

pgbench は石井 達夫によって書かれました．ライセンス条件は pgbench.c の
冒頭に書いてあります．この条件を守る限り無償で利用し，また自由に再配付
できます．

■PostgreSQLのcontribモジュールとして取り込まれるまでの改定履歴

2000/1/15 pgbench-1.2 は PostgreSQL に contribute されました．
	* -v オプション追加

1999/09/29 pgbench-1.1 リリース
	* 谷田さんによるcygwin対応パッチ取り込み
	* バックエンドクラッシュ時の対応
	* -S オプション追加

1999/09/04 pgbench-1.0 リリース
